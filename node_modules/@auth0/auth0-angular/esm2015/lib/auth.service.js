import { __awaiter } from "tslib";
import { Injectable, Inject } from '@angular/core';
import { Auth0Client, } from '@auth0/auth0-spa-js';
import { of, from, BehaviorSubject, Subject, iif, defer, ReplaySubject, } from 'rxjs';
import { concatMap, tap, map, filter, takeUntil, distinctUntilChanged, catchError, switchMap, } from 'rxjs/operators';
import { Auth0ClientService } from './auth.client';
import { AbstractNavigator } from './abstract-navigator';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./auth.client";
import * as i2 from "@angular/common";
import * as i3 from "./abstract-navigator";
export class AuthService {
    constructor(auth0Client, location, navigator) {
        this.auth0Client = auth0Client;
        this.location = location;
        this.navigator = navigator;
        this.isLoadingSubject$ = new BehaviorSubject(true);
        this.isAuthenticatedSubject$ = new BehaviorSubject(false);
        this.errorSubject$ = new ReplaySubject(1);
        // https://stackoverflow.com/a/41177163
        this.ngUnsubscribe$ = new Subject();
        /**
         * Emits boolean values indicating the loading state of the SDK.
         */
        this.isLoading$ = this.isLoadingSubject$.asObservable();
        /**
         * Emits boolean values indicating the authentication state of the user. If `true`, it means a user has authenticated.
         * This depends on the value of `isLoading$`, so there is no need to manually check the loading state of the SDK.
         */
        this.isAuthenticated$ = this.isLoading$.pipe(filter((loading) => !loading), distinctUntilChanged(), concatMap(() => this.isAuthenticatedSubject$));
        /**
         * Emits details about the authenticated user when `isAuthenticated$` is `true`.
         */
        this.user$ = this.isAuthenticated$.pipe(filter((authenticated) => authenticated), distinctUntilChanged(), concatMap(() => this.auth0Client.getUser()));
        /**
         * Emits ID token claims when `isAuthenticated$` is `true`.
         */
        this.idTokenClaims$ = this.isAuthenticated$.pipe(filter((authenticated) => authenticated), distinctUntilChanged(), concatMap(() => this.auth0Client.getIdTokenClaims()));
        /**
         * Emits errors that occur during login, or when checking for an active session on startup.
         */
        this.error$ = this.errorSubject$.asObservable();
        const checkSessionOrCallback$ = (isCallback) => iif(() => isCallback, this.handleRedirectCallback(), defer(() => this.auth0Client.checkSession()));
        this.shouldHandleCallback()
            .pipe(switchMap((isCallback) => checkSessionOrCallback$(isCallback).pipe(catchError((error) => {
            this.errorSubject$.next(error);
            this.navigator.navigateByUrl('/');
            return of(undefined);
        }))), concatMap(() => this.auth0Client.isAuthenticated()), tap((authenticated) => {
            this.isAuthenticatedSubject$.next(authenticated);
            this.isLoadingSubject$.next(false);
        }), takeUntil(this.ngUnsubscribe$))
            .subscribe();
    }
    /**
     * Called when the service is destroyed
     */
    ngOnDestroy() {
        // https://stackoverflow.com/a/41177163
        this.ngUnsubscribe$.next();
        this.ngUnsubscribe$.complete();
    }
    /**
     * ```js
     * loginWithRedirect(options);
     * ```
     *
     * Performs a redirect to `/authorize` using the parameters
     * provided as arguments. Random and secure `state` and `nonce`
     * parameters will be auto-generated.
     *
     * @param options The login options
     */
    loginWithRedirect(options) {
        return from(this.auth0Client.loginWithRedirect(options));
    }
    /**
     * ```js
     * await loginWithPopup(options);
     * ```
     *
     * Opens a popup with the `/authorize` URL using the parameters
     * provided as arguments. Random and secure `state` and `nonce`
     * parameters will be auto-generated. If the response is successful,
     * results will be valid according to their expiration times.
     *
     * IMPORTANT: This method has to be called from an event handler
     * that was started by the user like a button click, for example,
     * otherwise the popup will be blocked in most browsers.
     *
     * @param options The login options
     * @param config Configuration for the popup window
     */
    loginWithPopup(options, config) {
        return from(this.auth0Client.loginWithPopup(options, config).then(() => __awaiter(this, void 0, void 0, function* () {
            this.isAuthenticatedSubject$.next(yield this.auth0Client.isAuthenticated());
        })));
    }
    /**
     * ```js
     * logout();
     * ```
     *
     * Clears the application session and performs a redirect to `/v2/logout`, using
     * the parameters provided as arguments, to clear the Auth0 session.
     * If the `federated` option is specified it also clears the Identity Provider session.
     * If the `localOnly` option is specified, it only clears the application session.
     * It is invalid to set both the `federated` and `localOnly` options to `true`,
     * and an error will be thrown if you do.
     * [Read more about how Logout works at Auth0](https://auth0.com/docs/logout).
     *
     * @param options The logout options
     */
    logout(options) {
        this.auth0Client.logout(options);
        if (options === null || options === void 0 ? void 0 : options.localOnly) {
            this.isAuthenticatedSubject$.next(false);
        }
    }
    /**
     * ```js
     * getAccessTokenSilently(options).subscribe(token => ...)
     * ```
     *
     * If there's a valid token stored, return it. Otherwise, opens an
     * iframe with the `/authorize` URL using the parameters provided
     * as arguments. Random and secure `state` and `nonce` parameters
     * will be auto-generated. If the response is successful, results
     * will be valid according to their expiration times.
     *
     * If refresh tokens are used, the token endpoint is called directly with the
     * 'refresh_token' grant. If no refresh token is available to make this call,
     * the SDK falls back to using an iframe to the '/authorize' URL.
     *
     * This method may use a web worker to perform the token call if the in-memory
     * cache is used.
     *
     * If an `audience` value is given to this function, the SDK always falls
     * back to using an iframe to make the token exchange.
     *
     * Note that in all cases, falling back to an iframe requires access to
     * the `auth0` cookie, and thus will not work in browsers that block third-party
     * cookies by default (Safari, Brave, etc).
     *
     * @param options The options for configuring the token fetch.
     */
    getAccessTokenSilently(options) {
        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenSilently(options)));
    }
    /**
     * ```js
     * getTokenWithPopup(options).subscribe(token => ...)
     * ```
     *
     * Get an access token interactively.
     *
     * Opens a popup with the `/authorize` URL using the parameters
     * provided as arguments. Random and secure `state` and `nonce`
     * parameters will be auto-generated. If the response is successful,
     * results will be valid according to their expiration times.
     */
    getAccessTokenWithPopup(options) {
        return of(this.auth0Client).pipe(concatMap((client) => client.getTokenWithPopup(options)));
    }
    shouldHandleCallback() {
        return of(this.location.path()).pipe(map((search) => (search.includes('code=') || search.includes('error=')) &&
            search.includes('state=')));
    }
    handleRedirectCallback() {
        return defer(() => this.auth0Client.handleRedirectCallback()).pipe(tap((result) => {
            var _a, _b;
            const target = (_b = (_a = result === null || result === void 0 ? void 0 : result.appState) === null || _a === void 0 ? void 0 : _a.target) !== null && _b !== void 0 ? _b : '/';
            this.navigator.navigateByUrl(target);
        }));
    }
}
AuthService.ɵprov = i0.ɵɵdefineInjectable({ factory: function AuthService_Factory() { return new AuthService(i0.ɵɵinject(i1.Auth0ClientService), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.AbstractNavigator)); }, token: AuthService, providedIn: "root" });
AuthService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
AuthService.ctorParameters = () => [
    { type: Auth0Client, decorators: [{ type: Inject, args: [Auth0ClientService,] }] },
    { type: Location },
    { type: AbstractNavigator }
];
//# sourceMappingURL=data:application/json;base64,